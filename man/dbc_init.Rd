% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{dbc_init}
\alias{dbc_init}
\alias{dbc_init.default}
\alias{dbc_init.src_sql}
\title{Create functions for accessing a remote database}
\usage{
dbc_init(con, con_id, env = parent.frame(), ...)

\method{dbc_init}{default}(
  con,
  con_id,
  env = parent.frame(),
  tables = NULL,
  table_prefix = NULL,
  table_formatter = snakecase::to_snake_case,
  table_post = identity,
  ...
)

\method{dbc_init}{src_sql}(con, con_id, env = parent.frame(), ...)
}
\arguments{
\item{con}{A DBI-compliant database connection object, or a
\code{src_dbi}.}

\item{con_id}{A short string that identifies the database. This
is used to create functions \code{query_}, \code{tbl_} and
\code{execute_} with appropriate names, as well as to cache the
connection globally.}

\item{env}{Environment in which to create the table accessors, such
as the global environment or a package namespace.}

\item{...}{Arguments passed on to \code{dbc_init.default}.}

\item{tables}{Optionally, a vector of tables. Useful if dbcooper's
table listing functions don't work for a database, or if you want to
use only a subset of tables.}

\item{table_prefix}{Optionally, a prefix to append to each table,
usually a schema.}

\item{table_formatter}{Optionally, a function to clean the table name
before turning it into a function name, such as removing prefixes.
By default, \code{\link[snakecase]{to_snake_case}}.}

\item{table_post}{Optionally, post-processing to perform on each table before
returning it.}
}
\description{
Create and assign functions that make accessing a database easy.
These include \code{tbl_} functions for each table in the database,
as well as \code{query_[id]} and \code{execute_[id]} functions for
querying and executing SQL in the database.
}
\examples{

library(dplyr)
library(dbplyr)

# Initialize based on a SQL src or connection object
src <- lahman_sqlite()
dbc_init(src, "lahman")

## Tables

# Access each table using autocompleted functions
lahman_batting()

# Can also pass the name of a table as a string to lahman_tbl
lahman_tbl("Pitching")

# Pass no argument to get a vector of all the tables
lahman_list()

# Run a SQL query
lahman_query("SELECT COUNT(*) FROM Master")

# Execute queries that change the database
lahman_execute("CREATE TABLE Players AS
  SELECT playerID, sum(AB) as AB FROM Batting GROUP BY playerID"
)

lahman_tbl("Players")

lahman_execute("DROP TABLE Players")

}
